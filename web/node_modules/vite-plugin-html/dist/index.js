"use strict";Object.defineProperty(exports, "__esModule", {value: true});var __defProp = Object.defineProperty;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __assign = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// src/injectHtml.ts
var _ejs = require('ejs');
function injectHtml(options = {}) {
  return {
    name: "vite:injectHtml",
    transformIndexHtml: {
      enforce: "pre",
      transform(html) {
        const {injectData = {}, injectOptions = {}, tags = []} = options;
        return {
          html: _ejs.render.call(void 0, html, injectData, injectOptions),
          tags
        };
      }
    }
  };
}

// src/minifyHtml.ts
var _htmlminifierterser = require('html-minifier-terser');
function minifyHtml(minifyOptions = true) {
  return {
    name: "vite:minifyHtml",
    transformIndexHtml: {
      enforce: "post",
      transform(html) {
        if (!minifyOptions) {
          return html;
        }
        const defaultMinifyOptions = __assign({
          collapseBooleanAttributes: true,
          collapseWhitespace: true,
          minifyCSS: true,
          minifyJS: true,
          minifyURLs: true,
          removeAttributeQuotes: true,
          removeComments: true,
          removeEmptyAttributes: true
        }, typeof minifyOptions === "boolean" ? {} : minifyOptions);
        return _htmlminifierterser.minify.call(void 0, html, defaultMinifyOptions);
      }
    }
  };
}

// src/index.ts

var minifyFn = _htmlminifierterser.minify;
var src_default = (options = {}) => {
  const {inject = {}, minify: minify3 = {}} = options;
  return [injectHtml(inject), minifyHtml(minify3)];
};





exports.default = src_default; exports.injectHtml = injectHtml; exports.minifyFn = minifyFn; exports.minifyHtml = minifyHtml;
